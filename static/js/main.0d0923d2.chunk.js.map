{"version":3,"sources":["assets/logo.png","components/PrivateRoute.tsx","store/reducers/auth.ts","store/reducers/index.ts","store/actionTypes.tsx","store/store.tsx","axios/instaces.js","Authenticate.tsx","store/actions.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","connect","state","authenticated","auth","token","length","exact","path","Component","render","route","component","to","initialState","refresh","expires_in","expire_on","Number","localStorage","getItem","Date","combineReducers","action","type","payload","setItem","setSeconds","getSeconds","toString","createStore","rootReducer","composeWithDevTools","authInstance","axios","create","baseURL","timeout","headers","saveToken","props","history","useHistory","from","useLocation","pathname","handleGoogleAuth","resp","url","method","params","tokenId","then","respData","data","replace","className","src","logo","alt","appId","fields","callback","console","log","JSON","stringify","accessToken","size","clientId","onSuccess","onFailure","scope","Boolean","window","location","hostname","match","store","Authenticate","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d0923d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.13001b87.png\";","import React from \"react\";\nimport {Route, Redirect} from 'react-router-dom'\nimport {connect} from \"react-redux\";\n\ntype PrivateRoute = {\n    exact?: boolean,\n    path: string,\n    Component?: React.ComponentClass,\n    render?: Function,\n    authenticated: boolean\n}\n\nconst PrivateRoute = ({exact = false, path, Component, render = () => null, authenticated = false}: PrivateRoute) => {\n    let route = <Route exact={exact} path={path} component={Component} render={() => render()}/>;\n    if (!authenticated)\n        route = <Redirect to=\"/authenticate\"/>;\n\n    return route;\n};\n\nconst mapStateToProps = (state: any) =>{\n    const {auth} = state;\n    return {authenticated: auth.token.length > 0};\n};\n\nexport default connect(mapStateToProps)(PrivateRoute);","import {SAVE_TOKEN} from \"../actionTypes\";\n\nconst initialState = {\n    token: \"\",\n    refresh: \"\",\n    expires_in: 0,\n    expire_on: 0,\n};\n\nif (Number(localStorage.getItem(\"expire_on\")) > Number(new Date())){\n    initialState.token = localStorage.getItem(\"token\") || \"\";\n    initialState.refresh = localStorage.getItem(\"refresh\") || \"\";\n    initialState.expires_in = Number(new Date(Number(localStorage.getItem(\"expire_on\")))) - Number(new Date());\n    initialState.expire_on = Number(localStorage.getItem(\"expire_on\"));\n}\n\nexport default (state = initialState, action: any) => {\n    switch (action.type) {\n        case SAVE_TOKEN:\n            const {token, refresh, expires_in} = action.payload;\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem(\"refresh\", refresh);\n            localStorage.setItem(\"expire_on\", (new Date().setSeconds(new Date().getSeconds() + expires_in)).toString());\n            return {\n                ...state,\n                token,\n                refresh,\n                expires_in\n            };\n        default:\n            return state;\n    }\n};","import {combineReducers} from \"redux\";\nimport auth from \"./auth\";\n\nexport default combineReducers({auth});","export const SAVE_TOKEN = \"SAVE_TOKEN\";","import {createStore} from \"redux\";\nimport rootReducer from \"./reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nexport default createStore(rootReducer, composeWithDevTools());","import axios from 'axios';\n\nexport const authInstance = axios.create({\n    baseURL: 'https://hazizz.duckdns.org:9000/auth-server',\n    timeout: 2000,\n    headers: {\"Content-Type\": \"application/json\"},\n});\n\nexport const hazizzInstance = axios.create({\n    baseURL: 'https://hazizz.duckdns.org:9000/hazizz-server',\n    timeout: 2000,\n    headers: {\"Content-Type\": \"application/json\"},\n});\n\nexport const theraInstance = axios.create({\n    baseURL: 'https://hazizz.duckdns.org:9000/thera-server',\n    timeout: 2000,\n    headers: {\"Content-Type\": \"application/json\"},\n});","import React from 'react';\n\nimport GoogleLogin from \"react-google-login\";\nimport FacebookLogin, {ReactFacebookLoginInfo} from 'react-facebook-login';\n\nimport {authInstance} from \"./axios/instaces\";\n\nimport {connect} from \"react-redux\";\nimport {saveToken} from \"./store/actions\";\n\nimport {useHistory, useLocation} from \"react-router-dom\";\n\nimport logo from './assets/logo.png';\n\ntype tokenSave = {\n    saveToken: Function\n}\n\ntype authRequestResponseData = {\n    token: string,\n    refresh: string,\n    scopes: null,\n    expires_in: number,\n    refresh_token: string,\n    access_token: string,\n}\n\nfunction Authenticate(props: tokenSave) {\n    let history = useHistory();\n    let location = useLocation();\n\n    let {from} = location.state || {from: {pathname: \"/home\"}};\n\n    const handleGoogleAuth = (resp: any) => {\n        authInstance({\n            url: \"/auth\",\n            method: \"post\",\n            params: {\n                \"grant_type\": \"google_openid\",\n                \"openid_token\": resp.tokenId,\n                \"client_id\": \"H_MINDENHOL\"\n            }\n        })\n            .then(resp => {\n                const respData: authRequestResponseData = resp.data;\n                props.saveToken(respData.token, respData.refresh, respData.expires_in);\n                history.replace(from);\n            })\n    };\n\n    const handleFacebookLogin = (resp: ReactFacebookLoginInfo) => {\n        console.log(JSON.stringify(resp));\n        authInstance({\n            url: \"/auth\",\n            method: \"post\",\n            params: {\n                \"grant_type\": \"facebook_token\",\n                \"facebook_token\": resp.accessToken,\n                \"client_id\": \"H_MINDENHOL\"\n            }\n        })\n            .then(resp => {\n                const respData: authRequestResponseData = resp.data;\n                props.saveToken(respData.token, respData.refresh, respData.expires_in);\n                history.replace(from);\n            });\n    };\n\n    return (\n        <div className=\"authPage\">\n            <div>\n                <img src={logo} alt=\"HÃ¡zizz logo\" className=\"logo\"/>\n                <p>Jelentkezz be!</p>\n                <div>\n                    <FacebookLogin\n                        appId=\"737993926628989\"\n                        fields=\"email\"\n                        callback={handleFacebookLogin}\n                        size=\"small\"\n                    />\n                    <GoogleLogin\n                        clientId=\"425675787763-751dukg0oookea8tltaeboudlg0g555q.apps.googleusercontent.com\"\n                        onSuccess={handleGoogleAuth}\n                        onFailure={handleGoogleAuth}\n                        scope=\"openid\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = null;\n\nexport default connect(mapStateToProps, {saveToken})(Authenticate);\n","import {SAVE_TOKEN} from \"./actionTypes\";\n\nexport const saveToken = (token: string, refresh: string, expires_in: number) => ({\n    type: SAVE_TOKEN,\n    payload: {\n        token,\n        refresh,\n        expires_in\n    }\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Authenticate is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {HashRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nimport Authenticate from './Authenticate';\nimport './tailwind.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst render =\n    <Provider store={store}>\n        <Router>\n            <Redirect to=\"/home\"/>\n            <Switch>\n                <PrivateRoute path=\"/home\" render={() => <p>Home</p>}/>\n                <Route path=\"/authenticate\" component={Authenticate}/>\n            </Switch>\n        </Router>\n    </Provider>;\n\nReactDOM.render(render, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}